# -*- coding: utf-8 -*-
"""Matplotlib Assignement .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10KMegOLMw3bGWUBtjXk6OQ7l4gX27pVa

**MATPLOTLIB ASSIGNMENT:**

1.  Create a scatter plot using Matplotlib to visualize the relationship between two arrays, x and y for the given
data.
X = [1,2,3,4,5,6,7,8,9,10]
Y = [2,4,5,7,6,8,9,10,12,13]
"""

import matplotlib.pyplot as plt

# Given data
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [2, 4, 5, 7, 6, 8, 9, 10, 12, 13]

# Create a scatter plot
plt.scatter(x, y, color='blue', label='Data Points')

# Add labels and title
plt.xlabel('x values')
plt.ylabel('y values')
plt.title('Scatter Plot of x vs y')
plt.legend()

# Show the plot
plt.show()

"""2. ** Generate a line plot to visualize the trend of values for the given data.

data = np.array([3, 7, 9, 15, 22, 29, 35])**
"""

import matplotlib.pyplot as plt
import numpy as np

# Given data
data = np.array([3, 7, 9, 15, 22, 29, 35])

# Create a line plot
plt.plot(data, marker='o', linestyle='-', color='green', label='Trend Line')

# Add labels and title
plt.xlabel('Index')
plt.ylabel('Values')
plt.title('Line Plot of Given Data')
plt.legend()

# Show the plot
plt.show()

"""3. **Display a bar chart to represent the frequency of each item in the given array categories.
categories = ['A','B','C','D','E'] and values = [25,40,30,35,20]**
"""

import matplotlib.pyplot as plt

# Data
def display_bar_chart(categories, values):
    """
    Display a bar chart to represent the frequency of each item in the given array categories.

    Parameters:
        categories (list): A list of category names.
        values (list): A list of values corresponding to the categories.
    """
    # Plotting the bar chart
    plt.bar(categories, values, color='skyblue', edgecolor='black')

    # Adding labels and title
    plt.xlabel('Categories')
    plt.ylabel('Frequency')
    plt.title('Frequency of Each Item in Categories')

    # Display the chart
    plt.show()

# Given categories and values
categories = ['A', 'B', 'C', 'D', 'E']
values = [25, 40, 30, 35, 20]

# Display the bar chart
display_bar_chart(categories, values)

"""4. **Create a histogram to visualization the distribution of values in the array data.
data = np.random.normal(0,1,1000) **
"""

import numpy as np
import matplotlib.pyplot as plt

# Generate random data from a normal distribution
data = np.random.normal(0, 1, 1000)

# Create a histogram
plt.hist(data, bins=30, color='skyblue', edgecolor='black')

# Add titles and labels
plt.title('Histogram of Normally Distributed Data')
plt.xlabel('Value')
plt.ylabel('Frequency')

# Show the plot
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""5. **show a pie chart to represent the percentage distribution of different section in the array 'sections'.

sections = ['Section A','Section B','Section C','Section D']
sizes = [25,30,15,30]**
"""

import matplotlib.pyplot as plt

# Data
sections = ['Section A', 'Section B', 'Section C', 'Section D']
sizes = [25, 30, 15, 30]
colors = ['skyblue', 'lightgreen', 'gold', 'salmon']  # Optional: Add colors for clarity

# Create the pie chart
plt.figure(figsize=(8, 6))
plt.pie(sizes, labels=sections, autopct='%1.1f%%', startangle=90, colors=colors, wedgeprops={'edgecolor': 'black'})

# Add title
plt.title('Percentage Distribution of Sections')

# Display the pie chart
plt.show()

"""# **SEABORN ASSIGNMENT **

1. **Create a scatter plot to visualize the relationship between two variables, by generating a synthetic
dataset.**
"""

import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic dataset
np.random.seed(42)  # For reproducibility
x = np.random.rand(100) * 10  # Random values between 0 and 10
y = 2.5 * x + np.random.normal(0, 5, 100)  # Linear relation with some noise

# Create scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='dodgerblue', edgecolor='black', alpha=0.8)

# Add titles and labels
plt.title('Scatter Plot of Synthetic Dataset')
plt.xlabel('Variable X')
plt.ylabel('Variable Y')

# Add a grid for better readability
plt.grid(alpha=0.5, linestyle='--')

# Show plot
plt.show()

"""2. ** Generate a dataset of random numbers. Visualize the distribution of a numerical variable.**"""

import numpy as np
import matplotlib.pyplot as plt

# Generate a dataset of random numbers
np.random.seed(42)  # For reproducibility
data = np.random.normal(loc=50, scale=10, size=1000)  # Mean=50, Std Dev=10, 1000 data points

# Visualize the distribution using a histogram
plt.figure(figsize=(8, 6))
plt.hist(data, bins=30, color='lightcoral', edgecolor='black', alpha=0.8)

# Add titles and labels
plt.title('Distribution of Numerical Variable', fontsize=14)
plt.xlabel('Value', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

# Add grid lines
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.show()

"""3. ** Create a dataset representing categories and their corresponding values. Compare different categories
based on numerical values.**
"""

import matplotlib.pyplot as plt
import numpy as np

# Create a dataset
categories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']
values = [45, 25, 30, 50, 40]

# Create a bar chart
plt.figure(figsize=(8, 6))
bars = plt.bar(categories, values, color=['skyblue', 'salmon', 'gold', 'lightgreen', 'violet'], edgecolor='black')

# Add titles and labels
plt.title('Comparison of Categories Based on Values', fontsize=14)
plt.xlabel('Categories', fontsize=12)
plt.ylabel('Values', fontsize=12)

# Add value annotations on each bar
for bar in bars:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, str(bar.get_height()), ha='center', fontsize=10)

# Show gridlines for better readability
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.show()

"""**4. Generate a dataset with categories and numerical values. Visualize the distribution of a numerical
variable across different categories.**
"""

import numpy as np
import matplotlib.pyplot as plt

# Generate a dataset
np.random.seed(42)  # For reproducibility
categories = ['Category A', 'Category B', 'Category C', 'Category D']
data = {
    category: np.random.normal(loc=np.random.randint(40, 60), scale=5, size=50)
    for category in categories
}

# Prepare data for visualization
values = [data[category] for category in categories]

# Create a boxplot to visualize the distribution
plt.figure(figsize=(8, 6))
plt.boxplot(values, labels=categories, patch_artist=True,
            boxprops=dict(facecolor='lightblue', color='black'),
            medianprops=dict(color='red'))

# Add titles and labels
plt.title('Distribution of Numerical Values Across Categories', fontsize=14)
plt.xlabel('Categories', fontsize=12)
plt.ylabel('Values', fontsize=12)

# Show the plot
plt.show()

"""5. ** Generate a synthetic dataset with correlated features. Visualize the correlation matrix of a dataset using a
heatmap.**
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate synthetic dataset
np.random.seed(42)  # For reproducibility
n_samples = 200

# Features with correlations
feature_1 = np.random.normal(50, 10, n_samples)
feature_2 = feature_1 * 0.8 + np.random.normal(0, 5, n_samples)  # Correlated with feature_1
feature_3 = np.random.normal(30, 15, n_samples)
feature_4 = feature_1 * -0.5 + feature_3 * 0.4 + np.random.normal(0, 5, n_samples)  # Mixed correlation

# Combine into a DataFrame
data = pd.DataFrame({
    'Feature 1': feature_1,
    'Feature 2': feature_2,
    'Feature 3': feature_3,
    'Feature 4': feature_4
})

# Compute correlation matrix
correlation_matrix = data.corr()

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", cbar=True, square=True)

# Add titles and labels
plt.title('Correlation Matrix Heatmap', fontsize=14)
plt.show()



"""**PLOTLY ASSIGNMENT**"""

# Question 1
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Generate data
np.random.seed(30)
data = {
    'X': np.random.uniform(-10, 10, 300),
    'Y': np.random.uniform(-10, 10, 300),
    'Z': np.random.uniform(-10, 10, 300)
}
df = pd.DataFrame(data)

# Create 3D scatter plot
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

ax.scatter(df['X'], df['Y'], df['Z'], c='blue', marker='o', alpha=0.6)

# Label axes
ax.set_xlabel('X Axis')
ax.set_ylabel('Y Axis')
ax.set_zlabel('Z Axis')

plt.title('3D Scatter Plot of Random Data')
plt.show()

# Question 2
# part 1
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate student grade data
np.random.seed(15)
data = {
    'Grade': np.random.choice(['A', 'B', 'C', 'D', 'F'], 200),
    'Score': np.random.randint(50, 100, 200)
}
df = pd.DataFrame(data)

# Violin plot
plt.figure(figsize=(8, 6))
sns.violinplot(x='Grade', y='Score', data=df, palette='Set2')
plt.title('Distribution of Scores Across Grades')
plt.xlabel('Grade')
plt.ylabel('Score')
plt.show()

# part 2
# Generate sales data
np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)

# Pivot table for heatmap
pivot = df.pivot_table(index='Day', columns='Month', values='Sales', aggfunc='mean')

# Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pivot, cmap='YlGnBu', annot=True, fmt=".0f")
plt.title('Sales Variation Across Months and Days')
plt.xlabel('Month')
plt.ylabel('Day')
plt.show()

# question 3
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate the sales data
np.random.seed(20)
data = {
    'Month': np.random.choice(['Jan', 'Feb', 'Mar', 'Apr', 'May'], 100),
    'Day': np.random.choice(range(1, 31), 100),
    'Sales': np.random.randint(1000, 5000, 100)
}
df = pd.DataFrame(data)

# Create a pivot table: rows = Days, columns = Months
pivot_table = df.pivot_table(index='Day', columns='Month', values='Sales', aggfunc='mean')

# Plotting the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pivot_table, cmap="YlOrBr", annot=True, fmt=".0f", linewidths=0.5)
plt.title("Heatmap of Sales Variation Across Months and Days")
plt.xlabel("Month")
plt.ylabel("Day")
plt.tight_layout()
plt.show()

#Question 4

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Generate mesh grid
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
x, y = np.meshgrid(x, y)

# Calculate z values
z = np.sin(np.sqrt(x**2 + y**2))

# Flatten and create DataFrame (optional for analysis or storage)
data = {
    'X': x.flatten(),
    'Y': y.flatten(),
    'Z': z.flatten()
}
df = pd.DataFrame(data)

# 3D surface plot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(x, y, z, cmap='viridis', edgecolor='none')

# Add labels and title
ax.set_title('3D Surface Plot of z = sin(sqrt(x² + y²))')
ax.set_xlabel('X Axis')
ax.set_ylabel('Y Axis')
ax.set_zlabel('Z Axis')

# Add color bar
fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10)

plt.show()

# Question 5

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Generate the dataset
np.random.seed(25)
data = {
    'Country': ['USA', 'Canada', 'UK', 'Germany', 'France'],
    'Population': np.random.randint(100, 1000, 5),
    'GDP': np.random.randint(500, 2000, 5)
}
df = pd.DataFrame(data)

# Create the bubble chart
plt.figure(figsize=(10, 6))
plt.scatter(df['GDP'], df['Population'],
            s=df['Population'] * 2,  # Bubble size
            alpha=0.6, c='skyblue', edgecolors='black')

# Add labels
for i in range(len(df)):
    plt.text(df['GDP'][i]+20, df['Population'][i], df['Country'][i])

# Axis labels and title
plt.xlabel('GDP')
plt.ylabel('Population')
plt.title('Bubble Chart: GDP vs Population (Size ∝ Population)')

plt.grid(True)
plt.show()



"""**BOKEH ASSIGNMENT**"""

# 1. Create a Bokeh plot displaying a sine wave. Set x-values from 0 to 10 and y-values as the sine of x.

from bokeh.plotting import figure, show, output_file
import numpy as np

# Generate x and y values
x = np.linspace(0, 10, 500)
y = np.sin(x)

# Output to an HTML file
output_file("sine_wave.html")

# Create a Bokeh figure
p = figure(title="Sine Wave", x_axis_label='x', y_axis_label='sin(x)', width=800, height=400)
p.line(x, y, legend_label="sin(x)", line_width=2, line_color="navy")

# Show the plot
show(p)

# Create a Bokeh scatter plot using randomly generated x and y values. Use different sizes and colors for the
#markers based on the 'sizes' and 'colors' columns.

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource
import numpy as np
import pandas as pd

# Generate random data
np.random.seed(42)
n = 100
x = np.random.rand(n) * 100
y = np.random.rand(n) * 100
sizes = np.random.randint(10, 40, n)
colors = np.random.choice(['red', 'green', 'blue', 'orange', 'purple'], n)

# Create a DataFrame
df = pd.DataFrame({'x': x, 'y': y, 'sizes': sizes, 'colors': colors})

# Create a ColumnDataSource
source = ColumnDataSource(df)

# Output to an HTML file
output_file("scatter_plot.html")

# Create the scatter plot
p = figure(title="Random Scatter Plot with Sizes and Colors",
           x_axis_label='X', y_axis_label='Y', width=800, height=500)

p.scatter('x', 'y', size='sizes', color='colors', source=source, alpha=0.6)

# Show plot
show(p)

# Question 3

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource
from bokeh.transform import dodge
from bokeh.io import output_notebook

# Data
fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']
counts = [20, 25, 30, 35]

# Output to an HTML file
output_file("fruit_bar_chart.html")

# Create a ColumnDataSource
source = ColumnDataSource(data=dict(fruits=fruits, counts=counts))

# Create the bar chart
p = figure(x_range=fruits, height=400, title="Fruit Counts",
           toolbar_location=None, tools="")

p.vbar(x='fruits', top='counts', width=0.6, source=source, color="skyblue")

# Customize axes
p.xgrid.grid_line_color = None
p.y_range.start = 0

# Show the plot
show(p)

#question 4

from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource
from bokeh.transform import dodge
from bokeh.io import output_notebook

# Data
fruits = ['Apples', 'Oranges', 'Bananas', 'Pears']
counts = [20, 25, 30, 35]

# Output to an HTML file
output_file("fruit_bar_chart.html")

# Create a ColumnDataSource
source = ColumnDataSource(data=dict(fruits=fruits, counts=counts))

# Create the bar chart
p = figure(x_range=fruits, height=400, title="Fruit Counts",
           toolbar_location=None, tools="")

p.vbar(x='fruits', top='counts', width=0.6, source=source, color="skyblue")

# Customize axes
p.xgrid.grid_line_color = None
p.y_range.start = 0

# Show the plot
show(p)

# question 5

import numpy as np
from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource, LinearColorMapper, ColorBar
from bokeh.transform import transform
from bokeh.palettes import Viridis256

# Prepare data
np.random.seed(0)
data_heatmap = np.random.rand(10, 10)
x = np.linspace(0, 1, 10)
y = np.linspace(0, 1, 10)
xx, yy = np.meshgrid(x, y)

# Flatten the grid and values
source = ColumnDataSource(data=dict(
    x=xx.flatten(),
    y=yy.flatten(),
    value=data_heatmap.flatten()
))

# Set up output file
output_file("bokeh_heatmap.html")

# Create color mapper
mapper = LinearColorMapper(palette=Viridis256, low=0, high=1)

# Create figure
p = figure(title="Bokeh Heatmap", x_axis_label='X', y_axis_label='Y',
           x_range=(0, 1), y_range=(0, 1), toolbar_location=None)

# Add rectangles
p.rect(x="x", y="y", width=0.1, height=0.1,
       source=source,
       fill_color=transform('value', mapper),
       line_color=None)

# Add color bar
color_bar = ColorBar(color_mapper=mapper, label_standoff=12, location=(0, 0))
p.add_layout(color_bar, 'right')

# Display plot
show(p)

